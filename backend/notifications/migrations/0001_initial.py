# Generated by Django 4.2.7 on 2025-10-05 09:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('posts', '0003_extend_post_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email address for notifications', max_length=254)),
                ('subscription_type', models.CharField(choices=[('all_posts', 'All New Posts'), ('weekly_digest', 'Weekly Digest'), ('featured_posts', 'Featured Posts Only'), ('author_posts', 'Specific Author Posts')], default='all_posts', help_text='Type of email notifications to receive', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the subscription is active')),
                ('unsubscribe_token', models.CharField(help_text='Unique token for unsubscribing', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_notification_sent', models.DateTimeField(blank=True, help_text='When the last notification was sent to this subscription', null=True)),
                ('author_filter', models.ForeignKey(blank=True, help_text='Specific author to follow (for author_posts type)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, help_text='Registered user (optional for anonymous subscriptions)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='UnsubscribeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email address that unsubscribed', max_length=254)),
                ('subscription_type', models.CharField(help_text='Type of subscription that was cancelled', max_length=50)),
                ('reason', models.CharField(blank=True, choices=[('too_frequent', 'Too Many Emails'), ('not_interested', 'Not Interested Anymore'), ('wrong_email', 'Wrong Email Address'), ('spam', 'Marked as Spam'), ('other', 'Other Reason')], help_text='Reason for unsubscribing', max_length=50, null=True)),
                ('feedback', models.TextField(blank=True, help_text='Additional feedback from the user')),
                ('unsubscribe_token', models.CharField(help_text='Token used for unsubscribing', max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the unsubscribe request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string of the unsubscribe request')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'unsubscribe_requests',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='unsub_email_idx'), models.Index(fields=['unsubscribe_token'], name='unsub_token_idx'), models.Index(fields=['reason'], name='unsub_reason_idx'), models.Index(fields=['-created_at'], name='unsub_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('new_post', 'New Post Notification'), ('weekly_digest', 'Weekly Digest'), ('welcome', 'Welcome Email'), ('subscription_confirmation', 'Subscription Confirmation')], help_text='Type of notification sent', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='pending', help_text='Status of the notification', max_length=20)),
                ('subject', models.CharField(help_text='Email subject line', max_length=200)),
                ('error_message', models.TextField(blank=True, help_text='Error message if notification failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When the notification was successfully sent', null=True)),
                ('post', models.ForeignKey(blank=True, help_text='Post that triggered this notification (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_logs', to='posts.post')),
                ('subscription', models.ForeignKey(help_text='Subscription that received the notification', on_delete=django.db.models.deletion.CASCADE, related_name='notification_logs', to='notifications.emailsubscription')),
            ],
            options={
                'db_table': 'notification_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['subscription'], name='notif_log_subscription_idx'), models.Index(fields=['notification_type'], name='notif_log_type_idx'), models.Index(fields=['status'], name='notif_log_status_idx'), models.Index(fields=['post'], name='notif_log_post_idx'), models.Index(fields=['-created_at'], name='notif_log_created_idx'), models.Index(fields=['sent_at'], name='notif_log_sent_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['email'], name='subscription_email_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['user'], name='subscription_user_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['is_active'], name='subscription_active_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['subscription_type'], name='subscription_type_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['unsubscribe_token'], name='subscription_token_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['author_filter'], name='subscription_author_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['-created_at'], name='subscription_created_idx'),
        ),
        migrations.AddIndex(
            model_name='emailsubscription',
            index=models.Index(fields=['last_notification_sent'], name='subscription_last_sent_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emailsubscription',
            unique_together={('email', 'subscription_type', 'author_filter')},
        ),
    ]
