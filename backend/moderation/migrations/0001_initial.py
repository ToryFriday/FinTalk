# Generated by Django 4.2.7 on 2025-10-05 11:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('posts', '0003_extend_post_model'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('harassment', 'Harassment'), ('hate_speech', 'Hate Speech'), ('violence', 'Violence'), ('copyright', 'Copyright Violation'), ('misinformation', 'Misinformation'), ('off_topic', 'Off Topic'), ('other', 'Other')], help_text='Reason for flagging the content', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Additional details about why the content was flagged', max_length=1000)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('resolved_valid', 'Resolved - Valid Flag'), ('resolved_invalid', 'Resolved - Invalid Flag'), ('dismissed', 'Dismissed')], default='pending', help_text='Current status of the flag', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the flag was reviewed', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes from the moderator about the resolution', max_length=1000)),
                ('action_taken', models.CharField(blank=True, help_text="Action taken by moderator (e.g., 'content_removed', 'warning_issued')", max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the flag was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the flag was last updated')),
                ('flagged_by', models.ForeignKey(help_text='User who flagged the content', on_delete=django.db.models.deletion.CASCADE, related_name='flags_created', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(help_text='Post that was flagged', on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='posts.post')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Moderator who reviewed this flag', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flags_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'content_flags',
                'ordering': ['-created_at'],
                'permissions': [('can_moderate_content', 'Can moderate flagged content'), ('can_view_flags', 'Can view content flags'), ('can_resolve_flags', 'Can resolve content flags'), ('can_dismiss_flags', 'Can dismiss content flags')],
            },
        ),
        migrations.CreateModel(
            name='ModerationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_flag_threshold', models.IntegerField(default=3, help_text='Number of flags that trigger automatic review')),
                ('auto_hide_threshold', models.IntegerField(default=5, help_text='Number of flags that automatically hide content')),
                ('notify_moderators_on_flag', models.BooleanField(default=True, help_text='Send notifications to moderators when content is flagged')),
                ('notify_author_on_action', models.BooleanField(default=True, help_text='Notify content author when moderation action is taken')),
                ('enable_spam_detection', models.BooleanField(default=True, help_text='Enable automatic spam detection')),
                ('enable_profanity_filter', models.BooleanField(default=False, help_text='Enable automatic profanity filtering')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Moderation Settings',
                'verbose_name_plural': 'Moderation Settings',
                'db_table': 'moderation_settings',
            },
        ),
        migrations.CreateModel(
            name='ModerationAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('content_removed', 'Content Removed'), ('content_edited', 'Content Edited'), ('warning_issued', 'Warning Issued'), ('user_suspended', 'User Suspended'), ('user_banned', 'User Banned'), ('flag_dismissed', 'Flag Dismissed'), ('no_action', 'No Action Taken')], help_text='Type of moderation action taken', max_length=20)),
                ('reason', models.TextField(help_text='Reason for taking this action')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the action')),
                ('is_automated', models.BooleanField(default=False, help_text='Whether this action was taken automatically')),
                ('severity_level', models.IntegerField(default=1, help_text='Severity level of the action (1-5)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the action was taken')),
                ('affected_user', models.ForeignKey(blank=True, help_text='User affected by this action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions_received', to=settings.AUTH_USER_MODEL)),
                ('flag', models.ForeignKey(help_text='Flag that triggered this action', on_delete=django.db.models.deletion.CASCADE, related_name='moderation_actions', to='moderation.contentflag')),
                ('moderator', models.ForeignKey(help_text='Moderator who took the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions_taken', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(help_text='Post that was moderated', on_delete=django.db.models.deletion.CASCADE, related_name='moderation_actions', to='posts.post')),
            ],
            options={
                'db_table': 'moderation_actions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['flag'], name='mod_actions_flag_idx'), models.Index(fields=['post'], name='mod_actions_post_idx'), models.Index(fields=['moderator'], name='mod_actions_moderator_idx'), models.Index(fields=['affected_user'], name='mod_actions_affected_user_idx'), models.Index(fields=['action_type'], name='mod_actions_type_idx'), models.Index(fields=['-created_at'], name='mod_actions_created_idx'), models.Index(fields=['is_automated'], name='mod_actions_automated_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['post'], name='flags_post_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['flagged_by'], name='flags_flagged_by_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['status'], name='flags_status_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['reason'], name='flags_reason_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['reviewed_by'], name='flags_reviewed_by_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['-created_at'], name='flags_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['status', '-created_at'], name='flags_status_created_idx'),
        ),
        migrations.AddIndex(
            model_name='contentflag',
            index=models.Index(fields=['post', 'status'], name='flags_post_status_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentflag',
            unique_together={('post', 'flagged_by')},
        ),
    ]
