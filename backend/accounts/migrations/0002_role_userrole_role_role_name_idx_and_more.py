# Generated by Django 4.2.7 on 2025-10-04 19:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('admin', 'Administrator'), ('editor', 'Editor'), ('writer', 'Writer'), ('reader', 'Reader'), ('guest', 'Guest')], help_text='Role name', max_length=50, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable role name', max_length=100)),
                ('description', models.TextField(help_text='Description of the role and its permissions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role is active and can be assigned')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permissions', models.ManyToManyField(blank=True, help_text='Permissions associated with this role', to='auth.permission')),
            ],
            options={
                'db_table': 'roles',
                'permissions': [('can_manage_roles', 'Can manage user roles'), ('can_assign_roles', 'Can assign roles to users'), ('can_view_role_management', 'Can view role management interface')],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='When this role was assigned')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role assignment is active')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this role assignment expires (optional)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about this role assignment')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who assigned this role', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(help_text='Role assigned to the user', on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='accounts.role')),
                ('user', models.ForeignKey(help_text='User assigned to this role', on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_roles',
                'indexes': [models.Index(fields=['user'], name='user_role_user_idx'), models.Index(fields=['role'], name='user_role_role_idx'), models.Index(fields=['assigned_by'], name='user_role_assigned_by_idx'), models.Index(fields=['is_active'], name='user_role_active_idx'), models.Index(fields=['expires_at'], name='user_role_expires_idx'), models.Index(fields=['-assigned_at'], name='user_role_assigned_idx')],
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['name'], name='role_name_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['is_active'], name='role_active_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['-created_at'], name='role_created_idx'),
        ),
    ]
